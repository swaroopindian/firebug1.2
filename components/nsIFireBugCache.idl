/* See license.txt for terms of usage */

#include "nsISupports.idl"

interface nsIFireBugCacheEntry;
interface nsIFireBugCacheIterator;
interface nsIFireBugCacheIteratorHandler;
interface nsIFireBugCacheListener;

[scriptable, uuid(476F0A43-3F5E-46c7-95D6-1A7091FF7C6A)]
interface nsIFireBugCache : nsISupports
{
    /**
     * Called to initialize the cache.
     */ 
    void init();

    /*
     * Get cached response for specified URL or null
     * if the URL isn't in the cache.
     */
    string getSource(in string url);

    /**
     * Returns cache entry object for specified URL or null
     * if the URL isn't in the cache.
     */
    nsIFireBugCacheEntry getEntry(in string url);

    /**
     * Iterator over all entries in the cache.
     */
    void iterateEntries(in nsIFireBugCacheIteratorHandler handler);

    /**
     * Support for listeners
     */
    void addListener(in nsIFireBugCacheListener listener);
    void removeListener(in nsIFireBugCacheListener listener);
};  

[scriptable, uuid(6348358C-296E-4ed8-BB71-7A864358FF88)]
interface nsIFireBugCacheEntry : nsISupports
{
    readonly attribute string key;
    readonly attribute string contentType;
    readonly attribute string contentLength;
    readonly attribute string method;
    readonly attribute string time;
    readonly attribute string done;
    readonly attribute string data;
};

[scriptable, uuid(B9945248-BAB1-4c12-BDF8-8C055051566B)]
interface nsIFireBugCacheIteratorHandler : nsISupports
{
    void onEntry(in nsIFireBugCacheEntry cacheEntry);
};

interface nsIRequest;

[scriptable, uuid(A6432A6C-E913-4df4-8515-6F8F9B7F2EB3)]
interface nsIFireBugCacheListener : nsISupports
{
    void onDataAvailable(in nsIRequest request, in nsIFireBugCacheEntry cacheEntry);
    void onStopRequest(in nsIRequest request, in nsIFireBugCacheEntry cacheEntry, 
        in nsresult statusCode);
};

